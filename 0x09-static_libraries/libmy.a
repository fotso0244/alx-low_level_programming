!<arch>
0-isupper.c/    0           0     0     644     254       `
#include "main.h"
/**
 * _isupper - checks for uppercase character
 * @c: The character to be checked
 *
 * Return: 1 if uppercase, 0 otherwise
 */
int _isupper(int c)
{
	int s;

	if ((c >= 65) && (c <= 90))
	{
		s = 1;
	}
	else
		s = 0;
	return (s);
}

0-memset.c/     0           0     0     644     303       `
/**
 * _memset - fill n bytes
 * @s: memory area
 * @b: constant for use
 * @n: number of bytes to fill
 *
 * Return: pointer to memory area
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;
	char *res;

	for (i = 0; i <= n - 1; i++)
	{
		*(s + i) = b;
	}
	res = s;
	return (res);
}

0-strcat.c/     0           0     0     644     537       `
#include "main.h"
#include <string.h>
#include <stdio.h>
/**
 * _strlen - computes length of string
 * @s: string
 *
 * Return: length of a string
 */
int _strlen(char *s)
{
	int i = 0;

	while (*(s + i) != '\0')
		i++;
	return (i + 1);
}
/**
 * _strcat - concantenates 2 strings
 * @dest: first string
 * @src: second string
 *
 * Return: pointer to dest
 */
char *_strcat(char *dest, char *src)
{
	int k = _strlen(dest) - 1, j;

	for (j = 0; j <= _strlen(src) - 1; j++)
	{
		*(dest + k) = *(src + j);
		k++;
	}
	k++;
	return (dest);
}

100-atoi.c/     0           0     0     644     1720      `
#include "main.h"
#include <string.h>
#include <math.h>
#include <stdio.h>
/**
 * sizeFirstInt - computes size of first integer in string
 * @s: string parameter
 *
 * Return: an integer
 */
int sizeFirstInt(char *s)
{
	int i = 0, l = 0;

	while (i <= (int)strlen(s) - 1)
	{
		if (('0' <= s[i]) && (s[i] <= '9'))
		{
			l++;
			i++;
		}
		else
			if (l == 0)
				i++;
			else
				break;
	}
	/*printf("size of first int: %d\n", l);*/
	return (l);
}
/**
 * char2int - converts char to digit
 * @asc: ascii value
 *
 * Return: a digit
 */
int char2int(char asc)
{
	int res;

	switch (asc)
	{
		case '0':
			res = 0;
			break;
		case '1':
			res = 1;
			break;
		case '2':
			res = 2;
			break;
		case '3':
			res = 3;
			break;
		case '4':
			res = 4;
			break;
		case '5':
			res = 5;
			break;
		case '6':
			res = 6;
			break;
		case '7':
			res = 7;
			break;
		case '8':
			res = 8;
			break;
		case '9':
			res = 9;
			break;
	}
	return (res);
}
/**
 * puiss - computes a power b
 * @a: base
 * @b: power
 *
 * Return: a power b
 */
int puiss(int a, int b)
{
	int res = 1, i;

	for (i = 1; i <= b; i++)
		res *= a;
	return (res);
}
/**
 * _atoi - convert a string to an integer
 * @s: string to convert
 *
 * Return: an integer
 */
int _atoi(char *s)
{
	int val = 0, i = 0, sizeFirst = sizeFirstInt(s), j, k = 0, pos = 0, neg = 0;

	while (i <= (int)strlen(s) - 1)
	{
		if (s[i] == '-')
			neg++;
		if (s[i] == '+')
			pos++;
		if (('0' <= s[i]) && (s[i] <= '9'))
		{
			j = char2int(s[i]);
			j *= puiss(10, (sizeFirst - 1));
			val += j;
			i++;
			sizeFirst--;
			k = 1;
		}
		else
			if (k == 0)
				i++;
			else
				break;
	}
	if (neg > pos)
		val *= (-1);
	else
		if (neg == 1)
			val *= (-1);
	return (val);
}
1-isdigit.c/    0           0     0     644     250       `
#include "main.h"
/**
 * _isdigit - checks for uppercase character
 * @c: The character to be checked
 *
 * Return: 1 if digit, 0 otherwise
 */
int _isdigit(int c)
{
	int s;

	if ((c >= 48) && (c <= 57))
	{
		s = 1;
	}
	else
		s = 0;
	return (s);
}

1-memcpy.c/     0           0     0     644     360       `
/**
 * _memcpy - copy n bytes from memory area src to memory area dest
 * @dest: destination memory area
 * @src: source memory area
 * @n: number of bytes to copy
 *
 * Return: pointer to destination
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i <= n - 1; i++)
	{
		*(dest + i) = *(src + i);
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     737       `
#include "main.h"
#include <string.h>
#include <stdio.h>
/**
 * _strlen - computes length of string
 * @s: string
 *
 * Return: length of a string
 */
int _strlen(char *s)
{
	int i = 0;

	while (*(s + i) != '\0')
		i++;
	return (i + 1);
}
/**
 * _strncat - concantenates 2 strings
 * @dest: first string
 * @src: second string
 * @n: number of character from string src to concatenate
 *
 * Return: pointer to dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int k = _strlen(dest) - 1, j;

	if (n <= _strlen(src))
	{
		for (j = 0; j <= n - 1; j++)
		{
			*(dest + k) = *(src + j);
			k++;
		}
		*(dest + k) = '\0';
	}
	else
		for (j = 0; j <= _strlen(src) - 1; j++)
		{
			*(dest + k) = *(src + j);
			k++;
		}
	return (dest);
}

2-strchr.c/     0           0     0     644     516       `
#include <stddef.h>
#include <stdio.h>
#include <string.h>
/**
 * _strchr - locates a character in a string
 * @s: string
 * @c: a character
 *
 * Return: pointer to first occurrence of a character
 */
char *_strchr(char *s, char c)
{
	int i = 0;
	char *res;

	if (c != 0)
	{
		while (*(s + i) != '\0' || (s[i] == '\0' && s[i + 1] != '\0'))
		{
			if (*(s + i) == c)
			{
				res = s + i;
				break;
			}
			i++;
		}
		if (*(s + i) == '\0' && s[i + 1] == '\0')
			res = NULL;
	}
	else
		res = NULL;
	return (res);
}
2-strlen.c/     0           0     0     644     177       `
#include <string.h>
/**
 * _strlen - returns length of a string
 * @s: string to return length
 *
 * Return: length of string
 */
int _strlen(char *s)
{
	return (strlen(s));
}


2-strncpy.c/    0           0     0     644     786       `
#include "main.h"
#include <string.h>
#include <stdio.h>
/**
 * _strlen - computes length of string
 * @s: string
 *
 * Return: length of a string
 */
int _strlen(char *s)
{
	int i = 0;

	while (*(s + i) != '\0')
		i++;
	return (i + 1);
}
/**
 * _strncpy- copy n characters from a string
 * @dest: first string
 * @src: second string
 * @n: number of character from string src to copy
 *
 * Return: pointer to dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int k = 0, j;

	if (n <= _strlen(src))
	{
		for (j = 0; j <= n - 1; j++)
		{
			*(dest + k) = *(src + j);
			k++;
		}
	}
	else
		for (j = 0; j <= _strlen(src) - 1; j++)
		{
			*(dest + k) = *(src + j);
			k++;
		}
	if (n > _strlen(src))
		for (j = _strlen(src); j <= (n - 1); j++)
			*(dest + j) = 0;
	return (dest);
}
3-islower.c/    0           0     0     644     255       `
#include "main.h"
/**
 * _islower - checks for lowercase character
 * @c: The character to be checked
 *
 * Return: 1 if lowercase, 0 otherwise
 */
int _islower(int c)
{
	int s;

	if ((c >= 97) && (c <= 122))
	{
		s = 1;
	}
	else
		s = 0;
	return (s);
}


3-puts.c/       0           0     0     644     237       `
#include "main.h"
#include <string.h>
/**
 * _puts - prints a tring with _putchar function
 * @str: string to print
 */
void _puts(char *str)
{
	int i;

	for (i = 0; i <= (int)strlen(str) - 1; i++)
		_putchar(str[i]);
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     569       `
#include "main.h"
#include <stdio.h>
/**
 * _strlen - computes length of string
 * @s: string
 *
 * Return: length of a string
 */
int _strlen(char *s)
{
	int i = 0;

	while (*(s + i) != '\0')
		i++;
	return (i + 1);
}
/**
 * _strcmp - compares 2 strings
 * @s1: first string
 * @s2: second string
 *
 * Return: 0 if strings are same, different to 0 else
 */
int _strcmp(char *s1, char *s2)
{
	int k = 0, j;

	for (j = 0; j <= _strlen(s1) - 1; j++)
	{
		if (*(s1 + j) == *(s2 + j))
			continue;
		else
		{
			k = *(s1 + j) - *(s2 + j);
			break;
		}

	}
	return (k);
}

3-strspn.c/     0           0     0     644     578       `
#include <string.h>
/**
 * _strspn - gets length of a prefix substring
 * @s: string to scan
 * @accept: string containing character to match
 *
 * Return: length of initial substring
 */
int _strspn(char *s, char *accept)
{
	int i = 0, j = 0, match = 0;
	char res[100];

	while (*(s + i) != '\0')
	{
		while (*(accept + j) != '\0')
		{
			if (*(s + i) == *(accept + j))
			{
				res[i] = s[i];
				if (s[i] != s[i - 1])
					match++;
				break;
			}
			j++;
		}
		if (match == (int)strlen(accept))
			break;
		j = 0;
		i++;
	}
	res[i + 1] = '\0';
	return ((int)strlen(res));
}
4-isalpha.c/    0           0     0     644     340       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 * @c: The character to be checked
 *
 * Return: 1 if alphabetic character (lowercase or uppercase), 0 otherwise
 */
int _isalpha(int c)
{
	int s;

	if ((c >= 97) && (c <= 122))
	{
		s = 1;
	}
	else
		if ((c >= 65) && (c <= 90))
			s = 1;
		else
			s = 0;
	return (s);
}

4-strpbrk.c/    0           0     0     644     517       `
#include <stddef.h>
/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string to scan
 * @accept: set of bytes
 *
 * Return: pointer to the byte in s that matches of the bytes in accept
 */
char *_strpbrk(char *s, char *accept)
{
	int i = 0, j = 0;
	char *res;

	while (s[i] != '\0')
	{
		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
			{
				res = s + i;
				break;
			}
			j++;
		}
		if (accept[j] != '\0')
			break;
		j = 0;
		i++;
	}
	if (s[i] == '\0')
		res = NULL;
	return (res);
}

5-strstr.c/     0           0     0     644     854       `
#include <string.h>
/**
 * result - treatment
 * @j: int
 * @i: int
 * @s: char
 * @base: char
 *
 * Return: pointer to char
 */
char *result(int j, int i, char *base, char *s)
{
	char *res;

	if (j == (int)strlen(s))
		res = base + (i - j + 1);
	else
		res = NULL;
	return (res);
}
/**
 * _strstr - locates a substring
 * @haystack: string to scan
 * @needle: substring to search
 *
 * Return: pointer to first occurrence of substring
 */
char *_strstr(char *haystack, char *needle)
{
	int i = 0, j = 0, k = 0;

	while (*(haystack + i) != '\0')
	{
		if (*(haystack + i) == *(needle + j))
		{
			k++;
			j++;
		}
		else
		{
			if (haystack[i] != haystack[i - 1])
			{
				k = 0;
				j = 0;
			}
			else
				if (k > 1)
				{
					k = 0;
					j = 0;
				}
		}
		if (k == (int)strlen(needle))
			break;
		i++;
	}
	return (result(k, i, haystack, needle));
}
6-abs.c/        0           0     0     644     230       `
#include "main.h"
/**
 * _abs - prints absolute value of an integer
 * @n: an integer to process
 *
 * Return: absolute value
 */
int _abs(int n)
{
	int s;

	if (n >= 0)
		s = n;
	else
		if (n < 0)
			s = n * (-1);
	return (s);
}
9-strcpy.c/     0           0     0     644     299       `
#include "main.h"
#include <string.h>
/**
 * _strcpy - copy string
 * @dest: destination string
 * @src: source string
 *
 * Return: value of dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; i <= (int)strlen(src) - 1; i++)
		dest[i] = src[i];
	dest[i] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

